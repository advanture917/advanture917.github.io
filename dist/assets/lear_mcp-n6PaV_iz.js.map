{"version":3,"file":"lear_mcp-n6PaV_iz.js","sources":["../../src/posts/lear_mcp.md?raw"],"sourcesContent":["export default \"---\\r\\ntitle: \\\"MCP协议与应用实战：从Stdio到SSE与FastMCP实现\\\"\\r\\ndate: \\\"2025-07-26\\\"\\r\\nexcerpt: \\\"深入解析MCP（Model Context Protocol）的通信机制与应用场景，涵盖Stdio、SSE、Streamable-HTTP等传输方式，并展示如何基于FastMCP构建自定义MCP服务。\\\"\\r\\ncategory: \\\"AI 应用\\\"\\r\\ntags: [\\\"MCP\\\", \\\"通信协议\\\", \\\"Json-RPC\\\", \\\"FastMCP\\\", \\\"AI集成\\\"]\\r\\nauthor: \\\"adventure\\\"\\r\\nreadingTime: \\\"12分钟\\\"\\r\\nslug: \\\"mcp-protocol-guide\\\"\\r\\n---\\r\\n\\r\\n# 知识学习\\r\\n\\r\\n## 为什么需要mcp\\r\\n\\r\\nMCP（Model Context Protocol）是一个协议规范，是对模型、client、server 三者之间如何通信的统一协议\\r\\n\\r\\n如果没有类似 MCP 的协议，我们将需要创建 M×N 个自定义集成——为 AI 应用与外部能力的每一种可能组合创建一个（使用function-calling）。\\r\\n![](../../assets/images/image-11.png)\\r\\n\\r\\n计算机领域的任何问题都可以通过增加一个间接的中间层来解决\\r\\n\\r\\n这里加一个mcp-host作为中间层，形成这样的结构\\r\\n\\r\\n![](../../assets/images/image-9.png)\\r\\n\\r\\n有了mcp-host 就降低了对模型的要求，模型可以不支持function-calling，只需要有很强的逻辑执行能力就可以了，模型只需要理解 MCP 格式的 prompt/响应协议，并基于文本（或结构化 JSON）逻辑执行任务，不需要真正调用函数，而工具客户端的调用由MCPClient执行\\r\\n\\r\\n其中**mcp-host** 常见的就是cursor、Claude 、Cherry-studio（~~更适合国内使用~~）里面封装了**mcp-client**的逻辑，可以通过json配置client和mcp-server的连接\\r\\n\\r\\n\\r\\n\\r\\n## 通信协议\\r\\n\\r\\nMCP 定义了一个标准化的通信协议，使客户端和服务器能够以一致、可预测的方式交换消息。这种标准化对于社区间的互操作性至关重要。\\r\\n\\r\\n### Json-rpc\\r\\n\\r\\n下面是json-rpc的结构\\r\\n\\r\\n#### 1. 请求\\r\\n\\r\\n* 一个唯一标识符（ `id` ）\\r\\n\\r\\n* 要调用的方法名（例如， `tools/call` ）\\r\\n\\r\\n* 该方法参数（如有）\\r\\n\\r\\n* 示例\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\r\\n  \\\"id\\\": 1,\\r\\n  \\\"method\\\": \\\"tools/call\\\",\\r\\n  \\\"params\\\": {\\r\\n    \\\"name\\\": \\\"weather\\\",\\r\\n    \\\"arguments\\\": {\\r\\n      \\\"location\\\": \\\"San Francisco\\\"\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n#### 2. 响应\\r\\n\\r\\n从服务器发送给客户端以回复请求。响应消息包括：\\r\\n\\r\\n* 与相应请求相同的 `id`\\r\\n\\r\\n* `result` （成功）或 `error` （失败）\\r\\n\\r\\n成功响应：\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\r\\n  \\\"id\\\": 1,\\r\\n  \\\"result\\\": {\\r\\n    \\\"temperature\\\": 62,\\r\\n    \\\"conditions\\\": \\\"Partly cloudy\\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n失败响应：\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\r\\n  \\\"id\\\": 1,\\r\\n  \\\"error\\\": {\\r\\n    \\\"code\\\": -32602,\\r\\n    \\\"message\\\": \\\"Invalid location parameter\\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n#### 3. 通知\\r\\n\\r\\n单向消息，无需回复。通常由服务器发送给客户端，以提供有关事件的更新或通知。\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\r\\n  \\\"method\\\": \\\"progress\\\",\\r\\n  \\\"params\\\": {\\r\\n    \\\"message\\\": \\\"Processing data...\\\",\\r\\n    \\\"percent\\\": 50\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n### 传输机制\\r\\n\\r\\n#### Stdio （标准输入/输出）\\r\\n\\r\\nstdio 传输用于本地通信，即客户端和服务器运行在同一台机器上：\\r\\n\\r\\n* 主机应用程序作为子进程启动服务器，并通过向其标准输入（stdin）写入以及从其标准输出（stdout）读取来与其通信。\\r\\n\\r\\n\\r\\n\\r\\n#### HTTP + SSE (服务器发送事件) / 可流式传输的 HTTP\\r\\n\\r\\nHTTP+SSE 传输用于远程通信，客户端和服务器可能位于不同的机器上：\\r\\n\\r\\n\\r\\n\\r\\n这里贴一个npm包，可以实现stdio和sse的互相转换\\r\\n\\r\\n> Supergateway可以通过一条命令在SSE（服务器端事件）或WebSockets（WS）上运行基于MCP stdio的服务器。这对于远程访问、调试或连接到仅支持stdio的MCP服务器上的客户端非常有用。\\r\\n\\r\\nmcp目前提供了三种方式的服务 stdio、sse 、streamable-http\\r\\n\\r\\n下面快速介绍一下这三种方式的区别\\r\\n\\r\\n* mcp-server目前有两种形式，一种是对外直接提供服务的，可以直接通过sse的url进行通信，另一种是需要本地启动服务的，通过stdio或者发布成服务进行开放\\r\\n\\r\\n* 在modelscope可以通过查看mcp后面的hosted（为直接提供服务的）和local（需要本地部署）\\r\\n\\r\\n# 1. 环境要求\\r\\n\\r\\n* 如果要下载第三方提供的mcp服务建议安装\\r\\n\\r\\n- [ ] 安装node.js&#x20;\\r\\n\\r\\n- [ ] 安装uvx\\r\\n\\r\\n选择使用客户端的方式进行测试，下载[Cherry Studio](https://cherrystudiocn.com/)\\r\\n\\r\\n# 2. 配置\\r\\n\\r\\n在下面的模型服务中添加自己的平台及api-key\\r\\n\\r\\n![](/page/assets/images/image-10.png)\\r\\n\\r\\n进行mcp-server配置\\r\\n\\r\\n![](/page/assets/images/image-5.png)\\r\\n\\r\\n导入下面的json\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"filesystem\\\": {\\r\\n      \\\"name\\\": \\\"filesystem\\\",\\r\\n      \\\"type\\\": \\\"stdio\\\",\\r\\n      \\\"isActive\\\": true,\\r\\n      \\\"registryUrl\\\": \\\"\\\",\\r\\n      \\\"command\\\": \\\"npx\\\",\\r\\n      \\\"args\\\": [\\r\\n        \\\"-y\\\",\\r\\n        \\\"@modelcontextprotocol/server-filesystem\\\",\\r\\n        \\\"D:\\\\\\\\download\\\\\\\\test\\\"\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n上面参数是在本地通过node启动了一个本地服务\\r\\n\\r\\n开启mcp服务器（上面服务采用默认的stdio通信，即本地进程通信）\\r\\n\\r\\n在对话的设置中的助手设置开启模型的mcp服务\\r\\n\\r\\n![](/page/assets/images/image-8.png)\\r\\n\\r\\n# 3. 测试\\r\\n\\r\\n![](/page/assets/images/image-7.png)\\r\\n\\r\\n![](/page/assets/images/image-4.png)\\r\\n\\r\\n# 4. 编写mcp-server\\r\\n\\r\\n```bash\\r\\n# 下载fastmcp\\r\\npip install fastmcp\\r\\n```\\r\\n\\r\\n代码如下\\r\\n\\r\\n```python\\r\\nfrom pathlib import Path\\r\\nfrom fastmcp import Context\\r\\nfrom fastmcp import FastMCP,Client\\r\\nimport asyncio\\r\\nmcp = FastMCP(\\\"getPersonInfo\\\",port=8888)\\r\\nimport pandas as pd\\r\\nfrom fastmcp.resources import *\\r\\n@mcp.tool()\\r\\ndef getPersonInfo(ctx: Context | None = None) ->str|None:\\r\\n    \\\"\\\"\\\"返回所有的人员的个人信息（返回Markdown）\\r\\n    输入：无\\r\\n    输出：md_tabel (输出所有的人员的个人信息（markdown表格形式)\\r\\n    \\\"\\\"\\\"\\r\\n    path=r\\\"D:\\\\pycharm\\\\mcp\\\\demo1\\\\person.xlsx\\\"\\r\\n    df = pd.read_excel(path)\\r\\n    md_table = df.to_markdown()  # 不保留行索引\\r\\n    return md_table\\r\\n@mcp.tool()\\r\\ndef getOrderInfo(ctx: Context | None = None) ->str|None:\\r\\n    \\\"\\\"\\\"返回所有的菜品的相关信息（返回Markdown）\\r\\n    输入：无\\r\\n    输出：md_tabel (输出所有的菜的信息（markdown表格形式)\\r\\n    \\\"\\\"\\\"\\r\\n    path=r\\\"D:\\\\pycharm\\\\mcp\\\\demo1\\\\order.xlsx\\\"\\r\\n    df = pd.read_excel(path)\\r\\n    md_table = df.to_markdown()  # 不保留行索引\\r\\n    return md_table\\r\\ndef main():\\r\\n    mcp.run()\\r\\n\\r\\nif __name__ == \\\"__main__\\\":\\r\\n   #mcp.run()\\r\\n    mcp.run(transport='streamable-http')\\r\\n```\\r\\n\\r\\n运行上面代码并通过[ngork](https://dashboard.ngrok.com/)开放到公网\\r\\n\\r\\n```bash\\r\\npython demo.py\\r\\nngrok http http://localhost:8888\\r\\n```\\r\\n\\r\\n# 5. 使用dify测试\\r\\n\\r\\n在dify中选择agent支持mcp的策略\\r\\n\\r\\nmcp配置如下\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"getPersonInfo\\\": {\\r\\n    \\\"transport\\\": \\\"streamable_http\\\",\\r\\n\\\"headers\\\": {\\\"Content-Type\\\": \\\"application/json\\\"}, \\r\\n    \\\"url\\\": \\\"https://c6e6-49-74-111-140.ngrok-free.app/mcp/\\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\ndify在新版本中对Streamable HTTP通信增加了对响应的headers中Content-Type的判断，否则无法确定返回的响应是json字符串还是event字符串\\r\\n\\r\\n添加了请求体的类型仍有报错如下\\r\\n\\r\\n![](/page/assets/images/image-6.png)\\r\\n\\r\\nfastmcp的sdk导致的\\r\\n\\r\\n![](/page/assets/images/image-3.png)\\r\\n\\r\\n将url改为/mcp/\\r\\n\\r\\n![](/page/assets/images/image-2.png)\\r\\n\\r\\n进行测试\\r\\n\\r\\n![](/page/assets/images/image-1.png)\\r\\n\\r\\n> 新版本的dify 添加了对mcp的resource 和template的支持（未测试）\\r\\n\\r\\n# PS:MCP（需要local运行并且运行模式为stdio）转为sse/http\\r\\n\\r\\n很多平台提供了众多mcp-server，我们使用npm/uv 运行，但是部分只支持stdio，这样我们的一些平台就不能使用我们的mcp（如dify），这里可以使用supergate 转化一下\\r\\n\\r\\n[文件系统](https://www.modelscope.cn/mcp/servers/@modelcontextprotocol/filesystem) 这是一个local mcp&#x20;\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"mcpServers\\\": {\\r\\n    \\\"filesystem\\\": {\\r\\n      \\\"command\\\": \\\"npx\\\",\\r\\n      \\\"args\\\": [\\r\\n        \\\"-y\\\",\\r\\n        \\\"@modelcontextprotocol/server-filesystem\\\",\\r\\n        \\\"/Users/username/Desktop\\\",\\r\\n        \\\"/path/to/other/allowed/dir\\\"\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n这是他提供的 启动配置\\r\\n\\r\\n我们可以通过下面方式使其通过sse 方式启动（[supergateway](https://github.com/supercorp-ai/supergateway#readme) 启动）\\r\\n\\r\\n```bash\\r\\nnpx -y supergateway     --stdio \\\"npx -y @modelcontextprotocol/server-filesystem  D:\\\\gemini-cli\\\\test\\\"     --port 8000     --ssePath /sse\\r\\n```\\r\\n\\r\\n只需要根据需要更改引号内的mcp 服务即可\\r\\n\\r\\n![](/page/assets/images/image.png)\\r\\n\\r\\nsse的节点在`http://localhost:8000/sse`\\r\\n\\r\\n之后进行内网穿透即可\\r\\n\\r\\n\""],"names":["lear_mcp"],"mappings":"AAAA,MAAAA,EAAe}