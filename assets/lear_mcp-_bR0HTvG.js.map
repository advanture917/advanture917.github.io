{"version":3,"file":"lear_mcp-_bR0HTvG.js","sources":["../../src/posts/lear_mcp.md?raw"],"sourcesContent":["export default \"---\\ntitle: \\\"MCP协议与应用实战：从Stdio到SSE与FastMCP实现\\\"\\ndate: \\\"2025-07-26\\\"\\nexcerpt: \\\"深入解析MCP（Model Context Protocol）的通信机制与应用场景，涵盖Stdio、SSE、Streamable-HTTP等传输方式，并展示如何基于FastMCP构建自定义MCP服务。\\\"\\ncategory: \\\"AI 应用\\\"\\ntags: [\\\"MCP\\\", \\\"通信协议\\\", \\\"Json-RPC\\\", \\\"FastMCP\\\", \\\"AI集成\\\"]\\nauthor: \\\"adventure\\\"\\nreadingTime: \\\"12分钟\\\"\\nslug: \\\"mcp-protocol-guide\\\"\\n---\\n\\n# 知识学习\\n\\n## 为什么需要mcp\\n\\nMCP（Model Context Protocol）是一个协议规范，是对模型、client、server 三者之间如何通信的统一协议\\n\\n如果没有类似 MCP 的协议，我们将需要创建 M×N 个自定义集成——为 AI 应用与外部能力的每一种可能组合创建一个（使用function-calling）。\\n![](/images/image-11.png)\\n\\n计算机领域的任何问题都可以通过增加一个间接的中间层来解决\\n\\n这里加一个mcp-host作为中间层，形成这样的结构\\n\\n![](/images/image-9.png)\\n\\n有了mcp-host 就降低了对模型的要求，模型可以不支持function-calling，只需要有很强的逻辑执行能力就可以了，模型只需要理解 MCP 格式的 prompt/响应协议，并基于文本（或结构化 JSON）逻辑执行任务，不需要真正调用函数，而工具客户端的调用由MCPClient执行\\n\\n其中**mcp-host** 常见的就是cursor、Claude 、Cherry-studio（~~更适合国内使用~~）里面封装了**mcp-client**的逻辑，可以通过json配置client和mcp-server的连接\\n\\n\\n\\n## 通信协议\\n\\nMCP 定义了一个标准化的通信协议，使客户端和服务器能够以一致、可预测的方式交换消息。这种标准化对于社区间的互操作性至关重要。\\n\\n### Json-rpc\\n\\n下面是json-rpc的结构\\n\\n#### 1. 请求\\n\\n* 一个唯一标识符（ `id` ）\\n\\n* 要调用的方法名（例如， `tools/call` ）\\n\\n* 该方法参数（如有）\\n\\n* 示例\\n\\n```json\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1,\\n  \\\"method\\\": \\\"tools/call\\\",\\n  \\\"params\\\": {\\n    \\\"name\\\": \\\"weather\\\",\\n    \\\"arguments\\\": {\\n      \\\"location\\\": \\\"San Francisco\\\"\\n    }\\n  }\\n}\\n```\\n\\n#### 2. 响应\\n\\n从服务器发送给客户端以回复请求。响应消息包括：\\n\\n* 与相应请求相同的 `id`\\n\\n* `result` （成功）或 `error` （失败）\\n\\n成功响应：\\n\\n```json\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1,\\n  \\\"result\\\": {\\n    \\\"temperature\\\": 62,\\n    \\\"conditions\\\": \\\"Partly cloudy\\\"\\n  }\\n}\\n```\\n\\n失败响应：\\n\\n```json\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1,\\n  \\\"error\\\": {\\n    \\\"code\\\": -32602,\\n    \\\"message\\\": \\\"Invalid location parameter\\\"\\n  }\\n}\\n```\\n\\n#### 3. 通知\\n\\n单向消息，无需回复。通常由服务器发送给客户端，以提供有关事件的更新或通知。\\n\\n```json\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"method\\\": \\\"progress\\\",\\n  \\\"params\\\": {\\n    \\\"message\\\": \\\"Processing data...\\\",\\n    \\\"percent\\\": 50\\n  }\\n}\\n```\\n\\n### 传输机制\\n\\n#### Stdio （标准输入/输出）\\n\\nstdio 传输用于本地通信，即客户端和服务器运行在同一台机器上：\\n\\n* 主机应用程序作为子进程启动服务器，并通过向其标准输入（stdin）写入以及从其标准输出（stdout）读取来与其通信。\\n\\n\\n\\n#### HTTP + SSE (服务器发送事件) / 可流式传输的 HTTP\\n\\nHTTP+SSE 传输用于远程通信，客户端和服务器可能位于不同的机器上：\\n\\n\\n\\n这里贴一个npm包，可以实现stdio和sse的互相转换\\n\\n> Supergateway可以通过一条命令在SSE（服务器端事件）或WebSockets（WS）上运行基于MCP stdio的服务器。这对于远程访问、调试或连接到仅支持stdio的MCP服务器上的客户端非常有用。\\n\\nmcp目前提供了三种方式的服务 stdio、sse 、streamable-http\\n\\n下面快速介绍一下这三种方式的区别\\n\\n* mcp-server目前有两种形式，一种是对外直接提供服务的，可以直接通过sse的url进行通信，另一种是需要本地启动服务的，通过stdio或者发布成服务进行开放\\n\\n* 在modelscope可以通过查看mcp后面的hosted（为直接提供服务的）和local（需要本地部署）\\n\\n# 1. 环境要求\\n\\n* 如果要下载第三方提供的mcp服务建议安装\\n\\n- [ ] 安装node.js&#x20;\\n\\n- [ ] 安装uvx\\n\\n选择使用客户端的方式进行测试，下载[Cherry Studio](https://cherrystudiocn.com/)\\n\\n# 2. 配置\\n\\n在下面的模型服务中添加自己的平台及api-key\\n\\n![](/images/image-10.png)\\n\\n进行mcp-server配置\\n\\n![](/images/image-5.png)\\n\\n导入下面的json\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"filesystem\\\": {\\n      \\\"name\\\": \\\"filesystem\\\",\\n      \\\"type\\\": \\\"stdio\\\",\\n      \\\"isActive\\\": true,\\n      \\\"registryUrl\\\": \\\"\\\",\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"@modelcontextprotocol/server-filesystem\\\",\\n        \\\"D:\\\\\\\\download\\\\\\\\test\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n上面参数是在本地通过node启动了一个本地服务\\n\\n开启mcp服务器（上面服务采用默认的stdio通信，即本地进程通信）\\n\\n在对话的设置中的助手设置开启模型的mcp服务\\n\\n![](/images/image-8.png)\\n\\n# 3. 测试\\n\\n![](/images/image-7.png)\\n\\n![](/images/image-4.png)\\n\\n# 4. 编写mcp-server\\n\\n```bash\\n# 下载fastmcp\\npip install fastmcp\\n```\\n\\n代码如下\\n\\n```python\\nfrom pathlib import Path\\nfrom fastmcp import Context\\nfrom fastmcp import FastMCP,Client\\nimport asyncio\\nmcp = FastMCP(\\\"getPersonInfo\\\",port=8888)\\nimport pandas as pd\\nfrom fastmcp.resources import *\\n@mcp.tool()\\ndef getPersonInfo(ctx: Context | None = None) ->str|None:\\n    \\\"\\\"\\\"返回所有的人员的个人信息（返回Markdown）\\n    输入：无\\n    输出：md_tabel (输出所有的人员的个人信息（markdown表格形式)\\n    \\\"\\\"\\\"\\n    path=r\\\"D:\\\\pycharm\\\\mcp\\\\demo1\\\\person.xlsx\\\"\\n    df = pd.read_excel(path)\\n    md_table = df.to_markdown()  # 不保留行索引\\n    return md_table\\n@mcp.tool()\\ndef getOrderInfo(ctx: Context | None = None) ->str|None:\\n    \\\"\\\"\\\"返回所有的菜品的相关信息（返回Markdown）\\n    输入：无\\n    输出：md_tabel (输出所有的菜的信息（markdown表格形式)\\n    \\\"\\\"\\\"\\n    path=r\\\"D:\\\\pycharm\\\\mcp\\\\demo1\\\\order.xlsx\\\"\\n    df = pd.read_excel(path)\\n    md_table = df.to_markdown()  # 不保留行索引\\n    return md_table\\ndef main():\\n    mcp.run()\\n\\nif __name__ == \\\"__main__\\\":\\n   #mcp.run()\\n    mcp.run(transport='streamable-http')\\n```\\n\\n运行上面代码并通过[ngork](https://dashboard.ngrok.com/)开放到公网\\n\\n```bash\\npython demo.py\\nngrok http http://localhost:8888\\n```\\n\\n# 5. 使用dify测试\\n\\n在dify中选择agent支持mcp的策略\\n\\nmcp配置如下\\n\\n```json\\n{\\n  \\\"getPersonInfo\\\": {\\n    \\\"transport\\\": \\\"streamable_http\\\",\\n\\\"headers\\\": {\\\"Content-Type\\\": \\\"application/json\\\"}, \\n    \\\"url\\\": \\\"https://c6e6-49-74-111-140.ngrok-free.app/mcp/\\\"\\n  }\\n}\\n```\\n\\ndify在新版本中对Streamable HTTP通信增加了对响应的headers中Content-Type的判断，否则无法确定返回的响应是json字符串还是event字符串\\n\\n添加了请求体的类型仍有报错如下\\n\\n![](/images/image-6.png)\\n\\nfastmcp的sdk导致的\\n\\n![](/images/image-3.png)\\n\\n将url改为/mcp/\\n\\n![](/images/image-2.png)\\n\\n进行测试\\n\\n![](/images/image-1.png)\\n\\n> 新版本的dify 添加了对mcp的resource 和template的支持（未测试）\\n\\n# PS:MCP（需要local运行并且运行模式为stdio）转为sse/http\\n\\n很多平台提供了众多mcp-server，我们使用npm/uv 运行，但是部分只支持stdio，这样我们的一些平台就不能使用我们的mcp（如dify），这里可以使用supergate 转化一下\\n\\n[文件系统](https://www.modelscope.cn/mcp/servers/@modelcontextprotocol/filesystem) 这是一个local mcp&#x20;\\n\\n```json\\n{\\n  \\\"mcpServers\\\": {\\n    \\\"filesystem\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"@modelcontextprotocol/server-filesystem\\\",\\n        \\\"/Users/username/Desktop\\\",\\n        \\\"/path/to/other/allowed/dir\\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\n这是他提供的 启动配置\\n\\n我们可以通过下面方式使其通过sse 方式启动（[supergateway](https://github.com/supercorp-ai/supergateway#readme) 启动）\\n\\n```bash\\nnpx -y supergateway     --stdio \\\"npx -y @modelcontextprotocol/server-filesystem  D:\\\\gemini-cli\\\\test\\\"     --port 8000     --ssePath /sse\\n```\\n\\n只需要根据需要更改引号内的mcp 服务即可\\n\\n![](/images/image.png)\\n\\nsse的节点在`http://localhost:8000/sse`\\n\\n之后进行内网穿透即可\\n\\n\""],"names":["lear_mcp"],"mappings":"AAAA,MAAAA,EAAe}