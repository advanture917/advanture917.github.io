/**
 * GitHub Pages Blog JavaScript
 * Enhanced functionality for the blog
 */

(function() {
    'use strict';

    // DOM Content Loaded Event
    document.addEventListener('DOMContentLoaded', function() {
        initializeTheme();
        initializeNavigation();
        initializeSearch();
        initializeCodeHighlighting();
        initializeScrollToTop();
        initializeLazyLoading();
        initializeAnimations();
    });

    /**
     * Theme Management
     */
    function initializeTheme() {
        const themeToggle = document.querySelector('.theme-toggle');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
        
        // Load saved theme or use system preference
        const savedTheme = localStorage.getItem('theme') || 
                          (prefersDark.matches ? 'dark' : 'light');
        
        setTheme(savedTheme);

        if (themeToggle) {
            themeToggle.addEventListener('click', toggleTheme);
        }

        // Listen for system theme changes
        prefersDark.addEventListener('change', function(e) {
            if (!localStorage.getItem('theme')) {
                setTheme(e.matches ? 'dark' : 'light');
            }
        });
    }

    function setTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
        
        const themeIcon = document.querySelector('.theme-toggle i');
        if (themeIcon) {
            themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
        }
    }

    function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        setTheme(newTheme);
    }

    /**
     * Navigation Enhancement
     */
    function initializeNavigation() {
        const navToggle = document.querySelector('.nav-trigger');
        const nav = document.querySelector('.site-nav');
        
        if (navToggle && nav) {
            navToggle.addEventListener('change', function() {
                nav.classList.toggle('active', this.checked);
            });
        }

        // Close mobile menu when clicking outside
        document.addEventListener('click', function(e) {
            if (nav && !nav.contains(e.target) && !navToggle.contains(e.target)) {
                navToggle.checked = false;
                nav.classList.remove('active');
            }
        });

        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(function(link) {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }

    /**
     * Search Functionality
     */
    function initializeSearch() {
        const searchInput = document.querySelector('#search-input');
        const searchResults = document.querySelector('#search-results');
        
        if (!searchInput) return;

        let posts = [];
        
        // Load posts data (you would typically fetch this from Jekyll's JSON)
        loadPostsData().then(function(data) {
            posts = data;
        });

        searchInput.addEventListener('input', debounce(function() {
            const query = this.value.trim().toLowerCase();
            
            if (query.length < 2) {
                hideSearchResults();
                return;
            }

            const results = searchPosts(posts, query);
            displaySearchResults(results);
        }, 300));

        document.addEventListener('click', function(e) {
            if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                hideSearchResults();
            }
        });
    }

    function loadPostsData() {
        // In a real implementation, you would fetch from a JSON file
        // generated by Jekyll during build
        return Promise.resolve([
            {
                title: "Welcome to My GitHub Pages Blog",
                url: "/2024/01/15/welcome-to-my-blog/",
                excerpt: "Hello and welcome to my personal blog! I'm excited to start this journey...",
                date: "2024-01-15",
                tags: ["jekyll", "github-pages", "blogging"]
            },
            {
                title: "Getting Started with JavaScript ES6 Features",
                url: "/2024/01/20/javascript-es6-features/",
                excerpt: "JavaScript ES6 introduced many powerful features that have revolutionized...",
                date: "2024-01-20",
                tags: ["javascript", "es6", "web-development"]
            }
        ]);
    }

    function searchPosts(posts, query) {
        return posts.filter(function(post) {
            return post.title.toLowerCase().includes(query) ||
                   post.excerpt.toLowerCase().includes(query) ||
                   post.tags.some(tag => tag.toLowerCase().includes(query));
        });
    }

    function displaySearchResults(results) {
        const searchResults = document.querySelector('#search-results');
        if (!searchResults) return;

        if (results.length === 0) {
            searchResults.innerHTML = '<p class="no-results">No results found</p>';
        } else {
            searchResults.innerHTML = results.map(function(post) {
                return `
                    <div class="search-result">
                        <h3><a href="${post.url}">${post.title}</a></h3>
                        <p class="result-excerpt">${post.excerpt}</p>
                        <small class="result-meta">${post.date}</small>
                    </div>
                `;
            }).join('');
        }

        searchResults.style.display = 'block';
    }

    function hideSearchResults() {
        const searchResults = document.querySelector('#search-results');
        if (searchResults) {
            searchResults.style.display = 'none';
        }
    }

    /**
     * Code Highlighting Enhancement
     */
    function initializeCodeHighlighting() {
        // Add copy button to code blocks
        document.querySelectorAll('pre code').forEach(function(codeBlock) {
            const pre = codeBlock.parentElement;
            const button = document.createElement('button');
            button.className = 'copy-button';
            button.textContent = 'Copy';
            button.setAttribute('aria-label', 'Copy code to clipboard');

            button.addEventListener('click', function() {
                copyToClipboard(codeBlock.textContent);
                button.textContent = 'Copied!';
                setTimeout(() => button.textContent = 'Copy', 2000);
            });

            pre.style.position = 'relative';
            pre.appendChild(button);
        });
    }

    function copyToClipboard(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text);
        } else {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
        }
    }

    /**
     * Scroll to Top Button
     */
    function initializeScrollToTop() {
        const scrollButton = createScrollToTopButton();
        
        window.addEventListener('scroll', function() {
            if (window.pageYOffset > 300) {
                scrollButton.classList.add('visible');
            } else {
                scrollButton.classList.remove('visible');
            }
        });

        scrollButton.addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    }

    function createScrollToTopButton() {
        const button = document.createElement('button');
        button.className = 'scroll-to-top';
        button.innerHTML = 'â†‘';
        button.setAttribute('aria-label', 'Scroll to top');
        button.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            border: none;
            border-radius: 50%;
            background-color: var(--secondary-color);
            color: white;
            font-size: 20px;
            cursor: pointer;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            z-index: 1000;
        `;

        // Add visible state styles
        const style = document.createElement('style');
        style.textContent = `
            .scroll-to-top.visible {
                opacity: 1;
                visibility: visible;
            }
            .scroll-to-top:hover {
                background-color: var(--primary-color);
            }
        `;
        document.head.appendChild(style);
        document.body.appendChild(button);

        return button;
    }

    /**
     * Lazy Loading for Images
     */
    function initializeLazyLoading() {
        const images = document.querySelectorAll('img[data-src]');
        
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver(function(entries) {
                entries.forEach(function(entry) {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.removeAttribute('data-src');
                        imageObserver.unobserve(img);
                    }
                });
            });

            images.forEach(function(img) {
                imageObserver.observe(img);
            });
        } else {
            // Fallback for browsers without IntersectionObserver
            images.forEach(function(img) {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
            });
        }
    }

    /**
     * Animations
     */
    function initializeAnimations() {
        // Add fade-in animation to posts
        const posts = document.querySelectorAll('.post-list li, .post');
        
        if ('IntersectionObserver' in window) {
            const animationObserver = new IntersectionObserver(function(entries) {
                entries.forEach(function(entry) {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('fade-in');
                        animationObserver.unobserve(entry.target);
                    }
                });
            }, {
                threshold: 0.1
            });

            posts.forEach(function(post) {
                animationObserver.observe(post);
            });
        } else {
            // Fallback: add class immediately
            posts.forEach(function(post) {
                post.classList.add('fade-in');
            });
        }
    }

    /**
     * Utility Functions
     */
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = function() {
                clearTimeout(timeout);
                func.apply(this, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Reading progress indicator
    function initializeReadingProgress() {
        const progressBar = document.createElement('div');
        progressBar.className = 'reading-progress';
        progressBar.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 0%;
            height: 3px;
            background-color: var(--secondary-color);
            z-index: 1001;
            transition: width 0.3s ease;
        `;
        document.body.appendChild(progressBar);

        window.addEventListener('scroll', function() {
            const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
            progressBar.style.width = Math.min(scrolled, 100) + '%';
        });
    }

    // Initialize reading progress on post pages
    if (document.querySelector('.post-content')) {
        initializeReadingProgress();
    }

})();